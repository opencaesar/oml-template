/* 
 * The Maven coordinates for the project artifact
 */
ext.title = 'model'
description = 'This is model example'
group = 'com.example'
version = '1.0.0'

/* 
 * The Gradle plugins 
 */
apply plugin: 'base'
apply plugin: 'oml'

/* 
 * The Gradle task dependencies 
 */
buildscript {
	ext {
		oml = '2.+'
   		owl = '2.+'
    } 
	repositories {
		mavenLocal()
		mavenCentral()
	}
	dependencies {
		classpath "io.opencaesar.owl:owl-fuseki-gradle:$owl"
		classpath "io.opencaesar.owl:owl-shacl-gradle:$owl"
		classpath "io.opencaesar.owl:owl-query-gradle:$owl"
		classpath "io.opencaesar.owl:owl-load-gradle:$owl"
		classpath "io.opencaesar.owl:owl-save-gradle:$owl"
		classpath "io.opencaesar.owl:owl-reason-gradle:$owl"
		classpath "io.opencaesar.owl:owl-doc-gradle:$owl"
		classpath "io.opencaesar.oml:oml-merge-gradle:$oml"
		classpath "io.opencaesar.adapters:oml2owl-gradle:$oml"
		classpath "io.opencaesar.adapters:owl2oml-gradle:$oml"
	}
}

/*
 * Dataset-specific variables
 */
ext {
    // Name of dataset (matches one used in .fuseki.ttl file)
    dataset = 'model'
    // Root ontology IRI of the dataset
    rootIri = 'http://opencaesar.io/template/description/bundle'
}

/*
 * The repositories to look up OML dependencies in
 */
repositories {
    mavenLocal()
    mavenCentral()
}

/*
 * The OML dependencies
 */
dependencies {
    oml "io.opencaesar.ontologies:core-vocabularies:+"
}

/*
 * A task to extract and merge the OML dependencies
 * @seeAlso https://github.com/opencaesar/oml-tools/blob/master/oml-merge/README.md
 */
task downloadDependencies(type:io.opencaesar.oml.merge.OmlMergeTask, group:"oml", dependsOn: configurations.oml) {
    inputZipPaths = configurations.oml.files
    outputCatalogFolder = file('build/oml')
}

/*
 * A task to convert the OML catalog to OWL catalog
 * @seeAlso https://github.com/opencaesar/owl-adapter/blob/master/oml2owl/README.md
 */
task omlToOwl(type:io.opencaesar.oml2owl.Oml2OwlTask, group:"oml", dependsOn: downloadDependencies) {
    // OML catalog
    inputCatalogPath = file('catalog.xml')
    // OWL catalog
    outputCatalogPath = file('build/owl/catalog.xml')
    // Generate rules
    generateRules = true
}

/*
 * A task to run the Openllet reasoner on the OWL catalog
 * @seeAlso https://github.com/opencaesar/owl-tools/blob/master/owl-reason/README.md
 */
task owlReason(type:io.opencaesar.owl.reason.OwlReasonTask, group:"oml", dependsOn: omlToOwl) {
    // OWL catalog
    catalogPath = file('build/owl/catalog.xml')
    // Input ontology IRI to reason on
    inputOntologyIri = "$rootIri".toString()
    // Entailment statements to generate and the ontologies to persist them in
    specs = [
        "$rootIri/classes = ALL_SUBCLASS".toString(),
        "$rootIri/properties = INVERSE_PROPERTY | ALL_SUBPROPERTY".toString(),
        "$rootIri/individuals = ALL_INSTANCE | DATA_PROPERTY_VALUE | OBJECT_PROPERTY_VALUE | SAME_AS".toString()
    ]
    // Junit error report
    reportPath = file('build/reports/reasoning.xml')
}

/*
 * A task to check the project's build artifacts
 * @seeAlso https://docs.gradle.org/current/userguide/base_plugin.html
 */
tasks.named('check') {
    dependsOn owlReason
}